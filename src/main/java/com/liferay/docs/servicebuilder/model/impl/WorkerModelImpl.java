package com.liferay.docs.servicebuilder.model.impl;

import com.liferay.docs.servicebuilder.model.Worker;
import com.liferay.docs.servicebuilder.model.WorkerModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Worker service. Represents a row in the &quot;Event_Worker&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.docs.servicebuilder.model.WorkerModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link WorkerImpl}.
 * </p>
 *
 * @author gerbe
 * @see WorkerImpl
 * @see com.liferay.docs.servicebuilder.model.Worker
 * @see com.liferay.docs.servicebuilder.model.WorkerModel
 * @generated
 */
public class WorkerModelImpl extends BaseModelImpl<Worker>
    implements WorkerModel {
    /*
     * NOTE FOR DEVELOPERS:
     *
     * Never modify or reference this class directly. All methods that expect a worker model instance should use the {@link com.liferay.docs.servicebuilder.model.Worker} interface instead.
     */
    public static final String TABLE_NAME = "Event_Worker";
    public static final Object[][] TABLE_COLUMNS = {
            { "workerId", Types.BIGINT },
            { "firstName", Types.VARCHAR },
            { "middleName", Types.VARCHAR },
            { "lastName", Types.VARCHAR },
            { "gender", Types.VARCHAR },
            { "dateOfBirth", Types.VARCHAR },
            { "positionId", Types.BIGINT },
            { "employmentDate", Types.VARCHAR },
            { "salaryLevel", Types.VARCHAR },
            { "numberWorkPhone", Types.VARCHAR },
            { "numberHomePhone", Types.VARCHAR },
            { "bankId", Types.BIGINT },
            { "archived", Types.BOOLEAN }
        };
    public static final String TABLE_SQL_CREATE = "create table Event_Worker (workerId LONG not null primary key,firstName VARCHAR(75) null,middleName VARCHAR(75) null,lastName VARCHAR(75) null,gender VARCHAR(75) null,dateOfBirth VARCHAR(75) null,positionId LONG,employmentDate VARCHAR(75) null,salaryLevel VARCHAR(75) null,numberWorkPhone VARCHAR(75) null,numberHomePhone VARCHAR(75) null,bankId LONG,archived BOOLEAN)";
    public static final String TABLE_SQL_DROP = "drop table Event_Worker";
    public static final String ORDER_BY_JPQL = " ORDER BY worker.firstName ASC";
    public static final String ORDER_BY_SQL = " ORDER BY Event_Worker.firstName ASC";
    public static final String DATA_SOURCE = "liferayDataSource";
    public static final String SESSION_FACTORY = "liferaySessionFactory";
    public static final String TX_MANAGER = "liferayTransactionManager";
    public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.entity.cache.enabled.com.liferay.docs.servicebuilder.model.Worker"),
            true);
    public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.finder.cache.enabled.com.liferay.docs.servicebuilder.model.Worker"),
            true);
    public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
                "value.object.column.bitmask.enabled.com.liferay.docs.servicebuilder.model.Worker"),
            true);
    public static long BANKID_COLUMN_BITMASK = 1L;
    public static long POSITIONID_COLUMN_BITMASK = 2L;
    public static long FIRSTNAME_COLUMN_BITMASK = 4L;
    public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
                "lock.expiration.time.com.liferay.docs.servicebuilder.model.Worker"));
    private static ClassLoader _classLoader = Worker.class.getClassLoader();
    private static Class<?>[] _escapedModelInterfaces = new Class[] { Worker.class };
    private long _workerId;
    private String _firstName;
    private String _middleName;
    private String _lastName;
    private String _gender;
    private String _dateOfBirth;
    private long _positionId;
    private long _originalPositionId;
    private boolean _setOriginalPositionId;
    private String _employmentDate;
    private String _salaryLevel;
    private String _numberWorkPhone;
    private String _numberHomePhone;
    private long _bankId;
    private long _originalBankId;
    private boolean _setOriginalBankId;
    private boolean _archived;
    private long _columnBitmask;
    private Worker _escapedModel;

    public WorkerModelImpl() {
    }

    @Override
    public long getPrimaryKey() {
        return _workerId;
    }

    @Override
    public void setPrimaryKey(long primaryKey) {
        setWorkerId(primaryKey);
    }

    @Override
    public Serializable getPrimaryKeyObj() {
        return _workerId;
    }

    @Override
    public void setPrimaryKeyObj(Serializable primaryKeyObj) {
        setPrimaryKey(((Long) primaryKeyObj).longValue());
    }

    @Override
    public Class<?> getModelClass() {
        return Worker.class;
    }

    @Override
    public String getModelClassName() {
        return Worker.class.getName();
    }

    @Override
    public Map<String, Object> getModelAttributes() {
        Map<String, Object> attributes = new HashMap<String, Object>();

        attributes.put("workerId", getWorkerId());
        attributes.put("firstName", getFirstName());
        attributes.put("middleName", getMiddleName());
        attributes.put("lastName", getLastName());
        attributes.put("gender", getGender());
        attributes.put("dateOfBirth", getDateOfBirth());
        attributes.put("positionId", getPositionId());
        attributes.put("employmentDate", getEmploymentDate());
        attributes.put("salaryLevel", getSalaryLevel());
        attributes.put("numberWorkPhone", getNumberWorkPhone());
        attributes.put("numberHomePhone", getNumberHomePhone());
        attributes.put("bankId", getBankId());
        attributes.put("archived", getArchived());

        return attributes;
    }

    @Override
    public void setModelAttributes(Map<String, Object> attributes) {
        Long workerId = (Long) attributes.get("workerId");

        if (workerId != null) {
            setWorkerId(workerId);
        }

        String firstName = (String) attributes.get("firstName");

        if (firstName != null) {
            setFirstName(firstName);
        }

        String middleName = (String) attributes.get("middleName");

        if (middleName != null) {
            setMiddleName(middleName);
        }

        String lastName = (String) attributes.get("lastName");

        if (lastName != null) {
            setLastName(lastName);
        }

        String gender = (String) attributes.get("gender");

        if (gender != null) {
            setGender(gender);
        }

        String dateOfBirth = (String) attributes.get("dateOfBirth");

        if (dateOfBirth != null) {
            setDateOfBirth(dateOfBirth);
        }

        Long positionId = (Long) attributes.get("positionId");

        if (positionId != null) {
            setPositionId(positionId);
        }

        String employmentDate = (String) attributes.get("employmentDate");

        if (employmentDate != null) {
            setEmploymentDate(employmentDate);
        }

        String salaryLevel = (String) attributes.get("salaryLevel");

        if (salaryLevel != null) {
            setSalaryLevel(salaryLevel);
        }

        String numberWorkPhone = (String) attributes.get("numberWorkPhone");

        if (numberWorkPhone != null) {
            setNumberWorkPhone(numberWorkPhone);
        }

        String numberHomePhone = (String) attributes.get("numberHomePhone");

        if (numberHomePhone != null) {
            setNumberHomePhone(numberHomePhone);
        }

        Long bankId = (Long) attributes.get("bankId");

        if (bankId != null) {
            setBankId(bankId);
        }

        Boolean archived = (Boolean) attributes.get("archived");

        if (archived != null) {
            setArchived(archived);
        }
    }

    @Override
    public long getWorkerId() {
        return _workerId;
    }

    @Override
    public void setWorkerId(long workerId) {
        _workerId = workerId;
    }

    @Override
    public String getFirstName() {
        if (_firstName == null) {
            return StringPool.BLANK;
        } else {
            return _firstName;
        }
    }

    @Override
    public void setFirstName(String firstName) {
        _columnBitmask = -1L;

        _firstName = firstName;
    }

    @Override
    public String getMiddleName() {
        if (_middleName == null) {
            return StringPool.BLANK;
        } else {
            return _middleName;
        }
    }

    @Override
    public void setMiddleName(String middleName) {
        _middleName = middleName;
    }

    @Override
    public String getLastName() {
        if (_lastName == null) {
            return StringPool.BLANK;
        } else {
            return _lastName;
        }
    }

    @Override
    public void setLastName(String lastName) {
        _lastName = lastName;
    }

    @Override
    public String getGender() {
        if (_gender == null) {
            return StringPool.BLANK;
        } else {
            return _gender;
        }
    }

    @Override
    public void setGender(String gender) {
        _gender = gender;
    }

    @Override
    public String getDateOfBirth() {
        if (_dateOfBirth == null) {
            return StringPool.BLANK;
        } else {
            return _dateOfBirth;
        }
    }

    @Override
    public void setDateOfBirth(String dateOfBirth) {
        _dateOfBirth = dateOfBirth;
    }

    @Override
    public long getPositionId() {
        return _positionId;
    }

    @Override
    public void setPositionId(long positionId) {
        _columnBitmask |= POSITIONID_COLUMN_BITMASK;

        if (!_setOriginalPositionId) {
            _setOriginalPositionId = true;

            _originalPositionId = _positionId;
        }

        _positionId = positionId;
    }

    public long getOriginalPositionId() {
        return _originalPositionId;
    }

    @Override
    public String getEmploymentDate() {
        if (_employmentDate == null) {
            return StringPool.BLANK;
        } else {
            return _employmentDate;
        }
    }

    @Override
    public void setEmploymentDate(String employmentDate) {
        _employmentDate = employmentDate;
    }

    @Override
    public String getSalaryLevel() {
        if (_salaryLevel == null) {
            return StringPool.BLANK;
        } else {
            return _salaryLevel;
        }
    }

    @Override
    public void setSalaryLevel(String salaryLevel) {
        _salaryLevel = salaryLevel;
    }

    @Override
    public String getNumberWorkPhone() {
        if (_numberWorkPhone == null) {
            return StringPool.BLANK;
        } else {
            return _numberWorkPhone;
        }
    }

    @Override
    public void setNumberWorkPhone(String numberWorkPhone) {
        _numberWorkPhone = numberWorkPhone;
    }

    @Override
    public String getNumberHomePhone() {
        if (_numberHomePhone == null) {
            return StringPool.BLANK;
        } else {
            return _numberHomePhone;
        }
    }

    @Override
    public void setNumberHomePhone(String numberHomePhone) {
        _numberHomePhone = numberHomePhone;
    }

    @Override
    public long getBankId() {
        return _bankId;
    }

    @Override
    public void setBankId(long bankId) {
        _columnBitmask |= BANKID_COLUMN_BITMASK;

        if (!_setOriginalBankId) {
            _setOriginalBankId = true;

            _originalBankId = _bankId;
        }

        _bankId = bankId;
    }

    public long getOriginalBankId() {
        return _originalBankId;
    }

    @Override
    public boolean getArchived() {
        return _archived;
    }

    @Override
    public boolean isArchived() {
        return _archived;
    }

    @Override
    public void setArchived(boolean archived) {
        _archived = archived;
    }

    public long getColumnBitmask() {
        return _columnBitmask;
    }

    @Override
    public ExpandoBridge getExpandoBridge() {
        return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
            Worker.class.getName(), getPrimaryKey());
    }

    @Override
    public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
        ExpandoBridge expandoBridge = getExpandoBridge();

        expandoBridge.setAttributes(serviceContext);
    }

    @Override
    public Worker toEscapedModel() {
        if (_escapedModel == null) {
            _escapedModel = (Worker) ProxyUtil.newProxyInstance(_classLoader,
                    _escapedModelInterfaces, new AutoEscapeBeanHandler(this));
        }

        return _escapedModel;
    }

    @Override
    public Object clone() {
        WorkerImpl workerImpl = new WorkerImpl();

        workerImpl.setWorkerId(getWorkerId());
        workerImpl.setFirstName(getFirstName());
        workerImpl.setMiddleName(getMiddleName());
        workerImpl.setLastName(getLastName());
        workerImpl.setGender(getGender());
        workerImpl.setDateOfBirth(getDateOfBirth());
        workerImpl.setPositionId(getPositionId());
        workerImpl.setEmploymentDate(getEmploymentDate());
        workerImpl.setSalaryLevel(getSalaryLevel());
        workerImpl.setNumberWorkPhone(getNumberWorkPhone());
        workerImpl.setNumberHomePhone(getNumberHomePhone());
        workerImpl.setBankId(getBankId());
        workerImpl.setArchived(getArchived());

        workerImpl.resetOriginalValues();

        return workerImpl;
    }

    @Override
    public int compareTo(Worker worker) {
        int value = 0;

        value = getFirstName().compareTo(worker.getFirstName());

        if (value != 0) {
            return value;
        }

        return 0;
    }

    @Override
    public boolean equals(Object obj) {
        if (this == obj) {
            return true;
        }

        if (!(obj instanceof Worker)) {
            return false;
        }

        Worker worker = (Worker) obj;

        long primaryKey = worker.getPrimaryKey();

        if (getPrimaryKey() == primaryKey) {
            return true;
        } else {
            return false;
        }
    }

    @Override
    public int hashCode() {
        return (int) getPrimaryKey();
    }

    @Override
    public void resetOriginalValues() {
        WorkerModelImpl workerModelImpl = this;

        workerModelImpl._originalPositionId = workerModelImpl._positionId;

        workerModelImpl._setOriginalPositionId = false;

        workerModelImpl._originalBankId = workerModelImpl._bankId;

        workerModelImpl._setOriginalBankId = false;

        workerModelImpl._columnBitmask = 0;
    }

    @Override
    public CacheModel<Worker> toCacheModel() {
        WorkerCacheModel workerCacheModel = new WorkerCacheModel();

        workerCacheModel.workerId = getWorkerId();

        workerCacheModel.firstName = getFirstName();

        String firstName = workerCacheModel.firstName;

        if ((firstName != null) && (firstName.length() == 0)) {
            workerCacheModel.firstName = null;
        }

        workerCacheModel.middleName = getMiddleName();

        String middleName = workerCacheModel.middleName;

        if ((middleName != null) && (middleName.length() == 0)) {
            workerCacheModel.middleName = null;
        }

        workerCacheModel.lastName = getLastName();

        String lastName = workerCacheModel.lastName;

        if ((lastName != null) && (lastName.length() == 0)) {
            workerCacheModel.lastName = null;
        }

        workerCacheModel.gender = getGender();

        String gender = workerCacheModel.gender;

        if ((gender != null) && (gender.length() == 0)) {
            workerCacheModel.gender = null;
        }

        workerCacheModel.dateOfBirth = getDateOfBirth();

        String dateOfBirth = workerCacheModel.dateOfBirth;

        if ((dateOfBirth != null) && (dateOfBirth.length() == 0)) {
            workerCacheModel.dateOfBirth = null;
        }

        workerCacheModel.positionId = getPositionId();

        workerCacheModel.employmentDate = getEmploymentDate();

        String employmentDate = workerCacheModel.employmentDate;

        if ((employmentDate != null) && (employmentDate.length() == 0)) {
            workerCacheModel.employmentDate = null;
        }

        workerCacheModel.salaryLevel = getSalaryLevel();

        String salaryLevel = workerCacheModel.salaryLevel;

        if ((salaryLevel != null) && (salaryLevel.length() == 0)) {
            workerCacheModel.salaryLevel = null;
        }

        workerCacheModel.numberWorkPhone = getNumberWorkPhone();

        String numberWorkPhone = workerCacheModel.numberWorkPhone;

        if ((numberWorkPhone != null) && (numberWorkPhone.length() == 0)) {
            workerCacheModel.numberWorkPhone = null;
        }

        workerCacheModel.numberHomePhone = getNumberHomePhone();

        String numberHomePhone = workerCacheModel.numberHomePhone;

        if ((numberHomePhone != null) && (numberHomePhone.length() == 0)) {
            workerCacheModel.numberHomePhone = null;
        }

        workerCacheModel.bankId = getBankId();

        workerCacheModel.archived = getArchived();

        return workerCacheModel;
    }

    @Override
    public String toString() {
        StringBundler sb = new StringBundler(27);

        sb.append("{workerId=");
        sb.append(getWorkerId());
        sb.append(", firstName=");
        sb.append(getFirstName());
        sb.append(", middleName=");
        sb.append(getMiddleName());
        sb.append(", lastName=");
        sb.append(getLastName());
        sb.append(", gender=");
        sb.append(getGender());
        sb.append(", dateOfBirth=");
        sb.append(getDateOfBirth());
        sb.append(", positionId=");
        sb.append(getPositionId());
        sb.append(", employmentDate=");
        sb.append(getEmploymentDate());
        sb.append(", salaryLevel=");
        sb.append(getSalaryLevel());
        sb.append(", numberWorkPhone=");
        sb.append(getNumberWorkPhone());
        sb.append(", numberHomePhone=");
        sb.append(getNumberHomePhone());
        sb.append(", bankId=");
        sb.append(getBankId());
        sb.append(", archived=");
        sb.append(getArchived());
        sb.append("}");

        return sb.toString();
    }

    @Override
    public String toXmlString() {
        StringBundler sb = new StringBundler(43);

        sb.append("<model><model-name>");
        sb.append("com.liferay.docs.servicebuilder.model.Worker");
        sb.append("</model-name>");

        sb.append(
            "<column><column-name>workerId</column-name><column-value><![CDATA[");
        sb.append(getWorkerId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>firstName</column-name><column-value><![CDATA[");
        sb.append(getFirstName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>middleName</column-name><column-value><![CDATA[");
        sb.append(getMiddleName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>lastName</column-name><column-value><![CDATA[");
        sb.append(getLastName());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>gender</column-name><column-value><![CDATA[");
        sb.append(getGender());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>dateOfBirth</column-name><column-value><![CDATA[");
        sb.append(getDateOfBirth());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>positionId</column-name><column-value><![CDATA[");
        sb.append(getPositionId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>employmentDate</column-name><column-value><![CDATA[");
        sb.append(getEmploymentDate());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>salaryLevel</column-name><column-value><![CDATA[");
        sb.append(getSalaryLevel());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>numberWorkPhone</column-name><column-value><![CDATA[");
        sb.append(getNumberWorkPhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>numberHomePhone</column-name><column-value><![CDATA[");
        sb.append(getNumberHomePhone());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>bankId</column-name><column-value><![CDATA[");
        sb.append(getBankId());
        sb.append("]]></column-value></column>");
        sb.append(
            "<column><column-name>archived</column-name><column-value><![CDATA[");
        sb.append(getArchived());
        sb.append("]]></column-value></column>");

        sb.append("</model>");

        return sb.toString();
    }
}
